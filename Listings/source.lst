C51 COMPILER V9.60.0.0   SOURCE                                                            05/30/2020 19:20:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SOURCE
OBJECT MODULE PLACED IN .\Objects\source.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\so
                    -urce.lst) TABS(2) OBJECT(.\Objects\source.obj)

line level    source

   1          #include<reg51.h>
   2          #include<stdio.h>
   3          sbit ALE=P0^4;  
   4          sbit OE=P0^7; 
   5          sbit START=P0^5; 
   6          sbit EOC=P0^6;  
   7          
   8          sbit ADDA=P0^0;  //Address pins for selecting input channels.
   9          sbit ADDB=P0^1;
  10          sbit ADDC=P0^2;
  11          #define Adc_Data P2  //ADC
  12          #define DAC_port P3  //DAC
  13          
  14          //filtration constants
  15          unsigned char N = 5;
  16          unsigned char last_input = 0;   // initial state flag
  17          unsigned char oldest_input = 0;
  18          unsigned char full = 0;
  19          int z[5]={0};
  20          
  21          //target is lowpass 150hz, high pass 1hz,notch filter at 50hz
  22          float coeff[5]= {0.2397,0.02625,0.02704,0.02785,0.02837}; 
  23          
  24          void delay(unsigned int count) 
  25          {
  26   1          unsigned char i,j;
  27   1          for(i=0;i<count;i++)
  28   1          for(j=0;j<100;j++);
  29   1      }
  30          
  31          // void Filter(int x)
  32          // {
  33          //  static const unsigned char N = 5 ;
  34          //  unsigned char n;
  35          //  int result=0; 
  36          //  if(i<N)
  37          //  {
  38          //    testarray[i]= x;  
  39          //    i++;
  40          //  }
  41          //  else{
  42          //    for ( n = 0; n < (N-1); n++)
  43          //    {
  44          //      testarray[n] = testarray[n+1]; //shift w 7otkol value fi ely ganbha
  45          //    }
  46          //    testarray[N-1] = x;
  47          //  }
  48          //  for (n= 0 ; n< N ;  n++)  // idx =1
  49          //      { 
  50          //      //fih hena casting ha y7sl momkn y2sr 3al output                                 
  51          //             result += testarray[n] * coeff[ -n+N-1 ] * 255 ; //bamshy el coeff bmen el a5r lel awl
  52          //      }   
  53          //     result = (result>>8); // take Higher 8 bits i.e shifting to right , 
  54          //  DAC_port= result;
C51 COMPILER V9.60.0.0   SOURCE                                                            05/30/2020 19:20:04 PAGE 2   

  55          // }   
  56          
  57          void filter (int x)     // x is the input from adc
  58          {
  59   1        unsigned char n;
  60   1        int result = 0;
  61   1      
  62   1      
  63   1        z[last_input] = x;
  64   1        last_input = (last_input + 1) % N;
  65   1      
  66   1        if (last_input == 0)
  67   1          {
  68   2            full = 1;
  69   2          }
  70   1      
  71   1        if (full == 0)
  72   1          {
  73   2            for (n = 0; n < last_input; n++)  // idx =1
  74   2          {
  75   3            result += z[n] * coeff[-n+N-1] * 255;
  76   3          }
  77   2          }
  78   1      
  79   1        else
  80   1          {
  81   2            //  oldest_input = (last_input + 1) % N;
  82   2            for (n = 0; n < N; n++) // idx =1
  83   2          {
  84   3              result += z[(oldest_input + n) % N] * coeff[-n+N-1] * 255;  
  85   3          // result = z[(oldest_input + n) % N];  // for just debugging
  86   3          // printf ("current input is  %d  ", x);
  87   3          // printf ("%d  %d \t", n, result);
  88   3          // printf ("\n");
  89   3          }
  90   2            oldest_input = (last_input + 1) % N;
  91   2      
  92   2          }
  93   1      
  94   1          result = (result>>8); // take Higher 8 bits i.e shifting to right , 
  95   1        DAC_port= result;
  96   1      }
  97          
  98          void read_adc() //Function to drive ADC
  99          {
 100   1          ALE=1;
 101   1          START=1;
 102   1          ALE=0;
 103   1          START=0;
 104   1          while(EOC==1);
 105   1          while(EOC==0);
 106   1          OE=1;
 107   1         // filter(Adc_Data);  // or ------> filter(Adc_Data); // I think this is a little bit faster , we will 
             -save variable assignment operation 
 108   1          DAC_port = Adc_Data ;
 109   1          OE=0;
 110   1      }
 111          void adc() 
 112          {
 113   1          ADDC=0; // Selecting input channel IN0 using address lines
 114   1          ADDB=0;
 115   1          ADDA=0;
C51 COMPILER V9.60.0.0   SOURCE                                                            05/30/2020 19:20:04 PAGE 3   

 116   1          read_adc();
 117   1      }
 118          
 119          
 120          void main()
 121          { 
 122   1        Adc_Data = 0xFF ;
 123   1          EOC=1;
 124   1          ALE=0;
 125   1          OE=0;
 126   1          START=0;
 127   1          
 128   1          IE=0x82;
 129   1          while(1)
 130   1          {
 131   2              adc();
 132   2          }
 133   1          
 134   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    355    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
